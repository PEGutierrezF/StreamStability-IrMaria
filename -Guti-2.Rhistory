fit <- blavaan(model, data = data_pm, estimator = "Bayes")
# Check the structure of the dataset
str(data_pm)
# Remove rows with missing values
data_pm <- na.omit(data_pm)
# Define the model
model <- '
# Regressions
leaflitter ~ canopy
epilithon ~ decapod
decapod ~ epilithon + leaflitter + canopy
macroinvertebrates ~ decapod + epilithon + canopy
'
# Check the structure of the dataset
str(data_pm)
# Fit the model with Bayesian estimation
fit <- blavaan(model, data = data_pm, estimator = "Bayes")
data_pm
# Remove rows with missing values
data_pm <- na.omit(data_pm)
# Define the model
model <- '
# Regressions
leaflitter ~ canopy
epilithon ~ decapod
decapod ~ epilithon + leaflitter + canopy
macroinvertebrates ~ decapod + epilithon + canopy
'
# Check the structure of the dataset
str(data_pm)
# Remove rows with missing values
data_pm <- na.omit(data_pm)
# Define the model
model <- '
# Regressions
leaflitter ~ canopy
epilithon ~ decapod
decapod ~ epilithon + leaflitter + canopy
macroinvertebrates ~ decapod + epilithon + canopy
'
# Fit the model with Bayesian estimation
fit <- blavaan(model, data = data_pm, estimator = "Bayes")
# Remove rows with missing values
data_pm1 <- na.omit(data_pm)
# Define the model
model <- '
# Regressions
leaflitter ~ canopy
epilithon ~ decapod
decapod ~ epilithon + leaflitter + canopy
macroinvertebrates ~ decapod + epilithon + canopy
'
# Fit the model with Bayesian estimation
fit <- blavaan(model, data = data_pm1, estimator = "Bayes")
# Load the blavaan package
library(blcfa)
# Load the blavaan package
install.packages('blcfa')
library(blcfa)
# Load the blavaan package
install.packages('blcfa')
# Load the blavaan package
install.packages('blcfa')
library(blcfa)
library(devtools)
install_github("zhanglj37/blcfa")
library(blcfa)
library(blcfa)
myModel<-"
f1 =~ y1 + y2 + y3 + y4 + y5
f2 =~ y6 + y7 + y8 + y9 + y10
"
set.seed(1)
results <- blcfa(filename, varnames, usevar, myModel, estimation = "both", MCMAX = 5000, N.burn = 2500, bloutput = TRUE, interval = TRUE)
# Load the blavaan package
install.packages("devtools")
library(devtools)
library(devtools)
install_github("zhanglj37/blcfa")
library(blcfa)
library(blcfa)
library(blcfa)
setwd("C:/Users/Desktop/SimuExample/")
filename = system.file("extdata", "simu_data.txt", package = "blcfa")
varnames<-c(paste("y", 1:10, sep = ""))
usevar <- varnames
myModel<-"
f1 =~ y1 + y2 + y3 + y4 + y5
f2 =~ y6 + y7 + y8 + y9 + y10
"
set.seed(1)
results <- blcfa(filename, varnames, usevar, myModel, estimation = "both", MCMAX = 5000, N.burn = 2500, bloutput = TRUE, interval = TRUE)
set.seed(1)
results <- blcfa(filename, varnames, usevar, myModel,
estimation = "both", MCMAX = 500,
N.burn = 200, bloutput = TRUE,
interval = TRUE)
results
data(simu_data.txt)
data('simu_data.txt')
data(simu_data.txt)
data(simu_data)
library(blcfa)
library(blcfa)
filename
filename = system.file("extdata", "simu_data.txt", package = "blcfa")
View(variables)
View(variables)
simu_data.txt
extdata
"extdata"
"simu_data.txt"
View(data_pm)
filename
varnames<-c(paste("y", 1:10, sep = ""))
View(variables)
myModel<-"
f1 =~ y1 + y2 + y3 + y4 + y5
f2 =~ y6 + y7 + y8 + y9 + y10
"
myModel
results <- blcfa(filename, varnames, usevar, myModel,
estimation = "both", MCMAX = 500,
N.burn = 200, bloutput = TRUE,
interval = TRUE)
usevar <- varnames
myModel<-"
f1 =~ y1 + y2 + y3 + y4 + y5
f2 =~ y6 + y7 + y8 + y9 + y10
"
set.seed(1)
results <- blcfa(filename, varnames, usevar, myModel,
estimation = "both", MCMAX = 500,
N.burn = 200, bloutput = TRUE,
interval = TRUE)
results
canopycover <- read.xlsx("data/data_stability_metrics.xlsx", sheet='canopy', detectDates = TRUE)
# install.packages('optimx')
libraries <- c("modelr", "ggplot2", "plyr","dplyr", 'patchwork',
"reshape2", "ggpubr", "tidyverse", "grid","lubridate",
"fitdistrplus", "mgcv","ggtext", 'brms','magrittr',
'readxl', 'optimx', 'minpack.lm','openxlsx',
'lavaan', 'mvnormalTest', 'semPlot', 'lmtest',
'car')
lapply(libraries, require, character.only = TRUE)
canopycover <- read.xlsx("data/data_stability_metrics.xlsx", sheet='canopy', detectDates = TRUE)
head(canopycover)
canopy <- canopycover %>% dplyr::select(date_co, QPA_canopy, QPB_canopy)
canopy$date_co <- as.POSIXct(canopy$date_co,"%Y-%m-%d",tz = "UTC")
canopy <- na.omit(canopy)
tail(canopy)
################################################################
# Linear model Canopy QPA --------------------------------------
################################################################
QPA.canopy.mod  <- lm(QPA_canopy ~ date_co, data=canopy)
summary(QPA.canopy.mod)
# Temporal stability
residuals <- residuals(QPA.canopy.mod)
1/sd(residuals)
# Normality
shapiro.test(residuals)
QPB.canopy.mod  <- lm(QPB_canopy~ date_co, data=canopy)
summary(QPB.canopy.mod)
canopy$QPBCanopyresid<- QPB.canopy.mod$resid
canopy
1/apply(canopy, 2, sd)
# Temporal stability
residuals <- residuals(QPB.canopy.mod)
1/sd(residuals)
# Normality
shapiro.test(residuals)
hist(residuals)
# Autocorrelation
dwt(QPB.canopy.mod)
dwtest(QPB.canopy.mod)
# Autocorrelation
dwt(QPA.canopy.mod)
QPB.canopy.mod  <- lm(QPB_canopy~ date_co, data=canopy)
summary(QPB.canopy.mod)
# Temporal stability
residuals <- residuals(QPB.canopy.mod)
1/sd(residuals)
# Normality
shapiro.test(residuals)
hist(residuals)
# Autocorrelation
dwt(QPB.canopy.mod)
dwtest(QPB.canopy.mod)
# Heterocedasticity
# we fail to reject the null hypothesis (that variance of residuals is constant)
# and therefore infer that the residuals are homoscedastic.
lmtest::bptest(QPA.canopy.mod)  # Breusch-Pagan test
plot(QPA.canopy.mod, 1)
dwtest(QPB.canopy.mod)
# Autocorrelation
dwt(QPB.canopy.mod)
dwtest(QPB.canopy.mod)
# Heterocedasticity
# we fail to reject the null hypothesis (that variance of residuals is constant)
# and therefore infer that the residuals are homoscedastic.
lmtest::bptest(QPB.canopy.mod)  # Breusch-Pagan test
# par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(QPB.canopy.mod, 1)
# Heterocedasticity
# we fail to reject the null hypothesis (that variance of residuals is constant)
# and therefore infer that the residuals are homoscedastic.
lmtest::bptest(QPB.canopy.mod)  # Breusch-Pagan test
# Heterocedasticity
# we fail to reject the null hypothesis (that variance of residuals is constant)
# and therefore infer that the residuals are homoscedastic.
lmtest::bptest(QPA.canopy.mod)  # Breusch-Pagan test
# Normality
shapiro.test(residuals)
dwtest(QPB.canopy.mod)
dwtest(QPB.canopy.mod)
# Heterocedasticity
# we fail to reject the null hypothesis (that variance of residuals is constant)
# and therefore infer that the residuals are homoscedastic.
lmtest::bptest(QPB.canopy.mod)  # Breusch-Pagan test
canopycover <- read.xlsx("data/data_stability_metrics.xlsx", sheet='canopy', detectDates = TRUE)
head(canopycover)
canopycover
head(canopycover)
data_pm <- read.xlsx("data/data_cfa.xlsx", detectDates = TRUE)
head(data_pm)
summary(data_pm)
library(blavaan)
library(blavaan)
data(HolzingerSwineford1939, package = "lavaan")
# The Holzinger and Swineford (1939) example
HS.model <- ' visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed =~ x7 + x8 + x9 '
fit <- bcfa(HS.model, data = HolzingerSwineford1939)
summary(fit)
HolzingerSwineford1939
# The Holzinger and Swineford (1939) example
model <- '
# Regressions
leaflitter ~ canopy
epilithon ~ decapod
decapod ~ epilithon + leaflitter + canopy
macroinvertebrates ~ decapod + epilithon + canopy
'
fit <- bcfa(model, data = data_pm)
# Fit the model
fit1 <- bcfa(model, data = data_pm)
summary(fit1)
sampleData(fit1, nrep = 1)
data_pm <- read.xlsx("data/data_cfa.xlsx", detectDates = TRUE)
head(data_pm)
model <- '
# Regressions
leaflitter ~ canopy
epilithon ~ decapod
decapod ~ epilithon + leaflitter + canopy
macroinvertebrates ~ decapod + epilithon + canopy
'
# Fit the model
fit1 <- bcfa(model, data = data_pm)
summary(fit1)
library(blavaan)
data_pm <- read.xlsx("data/data_cfa.xlsx", detectDates = TRUE)
# install.packages('optimx')
libraries <- c("modelr", "ggplot2", "plyr","dplyr", 'patchwork',
"reshape2", "ggpubr", "tidyverse", "grid","lubridate",
"fitdistrplus", "mgcv","ggtext", 'brms','magrittr',
'readxl', 'optimx', 'minpack.lm','openxlsx',
'lavaan', 'mvnormalTest', 'semPlot', 'lmtest',
'car')
lapply(libraries, require, character.only = TRUE)
data_pm <- read.xlsx("data/data_cfa.xlsx", detectDates = TRUE)
head(data_pm)
summary(data_pm)
model <- '
# Regressions
leaflitter ~ canopy
epilithon ~ decapod
decapod ~ epilithon + leaflitter + canopy
macroinvertebrates ~ decapod + epilithon + canopy
'
# Fit the model
fit1 <- bcfa(model, data = data_pm)
summary(fit1)
data_pm
head(data_pm)
# Standardize variables
data_pm_standardized <- as.data.frame(scale(data_pm))
model <- '
# Regressions
leaflitter ~ canopy
epilithon ~ decapod
decapod ~ epilithon + leaflitter + canopy
macroinvertebrates ~ decapod + epilithon + canopy
'
# Fit the model
fit1 <- bcfa(model, data = data_pm_standardized)
summary(fit1)
data_pm <- read.xlsx("data/data_cfa.xlsx", detectDates = TRUE)
head(data_pm)
summary(data_pm)
# Interpolate NAs
data_pm_interpolated <- apply(data_pm, 2, na.approx)
# Standardize variables
data_pm_standardized <- as.data.frame(scale(data_pm_interpolated))
model <- '
# Regressions
leaflitter ~ canopy
epilithon ~ decapod
decapod ~ epilithon + leaflitter + canopy
macroinvertebrates ~ decapod + epilithon + canopy
'
# Fit the model
fit1 <- bcfa(model, data = data_pm_standardized)
summary(fit1)
blavInspect(fit1)
blavInspect(fit1, "psrf")
plot(fit1, 1:4, "autocorr")
plot(fit1)
# Fit the model
fit1 <- bcfa(model, data = data_pm_standardized)
summary(fit)
blavInspect(fit, 'rhat')
fit
blavInspect(fit, 'rhat')
blavInspect(fit, 'neff')
plot(fit1)
blavInspect(fit)
plot(fit1,plot.type = "acf")
plot(fit,plot.type = "acf")
plot(fit)
model <- '
# Regressions
leaflitter ~ canopy
epilithon ~ decapod
decapod ~ epilithon + leaflitter + canopy
macroinvertebrates ~ decapod + epilithon + canopy
'
# Fit the model
fit <- bcfa(model, data = data_pm_standardized)
summary(fit)
plot(fit)
# Fit the model
fit <- bcfa(model, data = data_pm_standardized,
n.chains = 3, burnin = 250, sample = 500)
summary(fit)
plot(fit)
# Fit the model
fit <- bcfa(model, data = data_pm_standardized,
n.chains = 4, burnin = 500, sample = 1000)
summary(fit)
plot(fit)
# Fit the model
fit <- bcfa(model, data = data_pm_standardized,
n.chains = 4, burnin = 8000, sample = 10000)
summary(fit)
plot(fit)
mcmc.list <- blavInspect(fit, what = "mcmc")
gelman.diag(mcmc.list)
library(rjags)
install.packages(rjags)
mcmc.list <- blavInspect(fit, what = "mcmc")
mcmc.list
gelman.diag(mcmc.list)
library(coda)
library(coda)
gelman.diag(mcmc.list)
plot(fit)
mcmc.list <- blavInspect(fit, what = "rhat")
gelman.diag(mcmc.list)
?blavInspect
mcmc.list <- blavInspect(fit, what = "rhat")
gelman.diag(mcmc.list)
mcmc.list <- blavInspect(fit, "rhat")
?blavInspect
gelman.diag(mcmc.list)
# Assuming 'fit' is your Stan model object
mcmc.list <- extract(fit)
library(rstan)
library(rstan)
# Assuming 'fit' is your Stan model object
mcmc.list <- extract(fit)
# Now you can use 'mcmc.list' with the blavInspect function
blavInspect(mcmc.list, "rhat")
# Now you can use 'mcmc.list' with the blavInspect function
blavInspect(fit, "rhat")
mcmc.list <- blavInspect(fit, what = "mcmc")
gelman.diag(mcmc.list)
# Fit the model
mod <- bcfa(model, data = data_pm_standardized,
n.chains = 4, burnin = 8000, sample = 10000,
seed = 14)
# Fit the model
mod <- bcfa(model, data = data_pm_standardized,
n.chains = 4, burnin = 8000, sample = 10000,
seed = 14)
summary(fit)
# extract information
blavInspect(fit, "rhat")
mcmc.list <- blavInspect(fit, what = "mcmc")
gelman.diag(mcmc.list)
plot(fit)
# Fit the model
mod <- bcfa(model, data = data_pm_standardized,
n.chains = 4, burnin = 8000, sample = 10000,
seed = 14, mcmcfile = T)
summary(fit)
semPaths(semPlotModel_lavaanModel(model))
model <- '
# Regressions
leaflitter ~ canopy
epilithon ~ decapod
decapod ~ epilithon + leaflitter + canopy
macroinvertebrates ~ decapod + epilithon + leaflitter + canopy
'
# Fit the model
mod <- bcfa(model, data = data_pm_standardized,
n.chains = 4, burnin = 8000, sample = 10000,
seed = 14, mcmcfile = T)
summary(fit)
semPaths(semPlotModel_lavaanModel(model))
# extract information
blavInspect(fit, "rhat")
mcmc.list <- blavInspect(fit, what = "mcmc")
gelman.diag(mcmc.list)
plot(fit)
# extract information
blavInspect(fit, "rhat")
gelman.diag(mcmc.list)
summary(fit)
summary(mod)
# Extract the MCMC chain for each parameter
chain <- mcmc.list(mod)
# Autocorrelation ---------------------------------------------------------
# Extract MCMC samples
mcmc_samples <- mcmc(mod)
# Extract the MCMC chain for each parameter
chain <- mcmc.list(mod)
# Extract the MCMC chain for each parameter
chain <- mcmc.list(mcmc_samples)
# Plot the autocorrelation function (ACF) for each parameter's chain
par(mfrow=c(3, 4))  # Adjust the layout if needed
for (i in 1:length(chain)) {
acf(chain[[i]], main=paste("ACF for Parameter", i))
}
# Autocorrelation ---------------------------------------------------------
# Extract MCMC samples
mcmc_samples <- mcmc(mod)
# Extract the MCMC chain for each parameter
chain <- mcmc.list(mcmc_samples)
# Plot the autocorrelation function (ACF) for each parameter's chain
par(mfrow=c(3, 4))  # Adjust the layout if needed
for (i in 1:length(chain)) {
acf(chain[[i]], main=paste("ACF for Parameter", i))
}
# Plot the partial autocorrelation function (PACF) for each parameter's chain
par(mfrow=c(3, 4))  # Adjust the layout if needed
for (i in 1:length(chain)) {
pacf(chain[[i]], main=paste("PACF for Parameter", i))
}
# Plot the autocorrelation function (ACF) for each parameter's chain
par(mfrow=c(3, 4))  # Adjust the layout if needed
for (i in 1:ncol(as.matrix(mcmc_samples))) {
acf(mcmc_samples[, i], main=paste("ACF for Parameter", i))
}
plot(mod,plot.type = "acf")
# Autocorrelation ---------------------------------------------------------
# Extract MCMC samples
mcmc_samples <- mcmc(mod)
# Extract the MCMC chain for each parameter
chain <- mcmc.list(mcmc_samples)
# Plot the autocorrelation function (ACF) for each parameter's chain
par(mfrow=c(3, 4))  # Adjust the layout if needed
for (i in 1:ncol(as.matrix(mcmc_samples))) {
acf(mcmc_samples[, i], main=paste("ACF for Parameter", i))
}
for (i in 1:ncol(as.matrix(chain))) {
acf(mcmc_samples[, i], main=paste("ACF for Parameter", i))
}
install.packages('blavaan')
library(blavaan)
install.packages('blavaan')
library(blavaan)
library(coda)
data_pm <- read.xlsx("data/data_cfa.xlsx", detectDates = TRUE)
# install.packages('optimx')
libraries <- c("modelr", "ggplot2", "plyr","dplyr", 'patchwork',
"reshape2", "ggpubr", "tidyverse", "grid","lubridate",
"fitdistrplus", "mgcv","ggtext", 'brms','magrittr',
'readxl', 'optimx', 'minpack.lm','openxlsx',
'lavaan', 'mvnormalTest', 'semPlot', 'lmtest',
'car')
lapply(libraries, require, character.only = TRUE)
data_pm <- read.xlsx("data/data_cfa.xlsx", detectDates = TRUE)
head(data_pm)
summary(data_pm)
# Interpolate NAs
data_pm_interpolated <- apply(data_pm, 2, na.approx)
# Standardize variables
data_pm_standardized <- as.data.frame(scale(data_pm_interpolated))
model <- '
# Regressions
leaflitter ~ canopy
epilithon ~ decapod
decapod ~ epilithon + leaflitter + canopy
macroinvertebrates ~ decapod + epilithon + leaflitter + canopy
'
# Fit the model
mod <- bcfa(model, data = data_pm_standardized,
n.chains = 4, burnin = 8000, sample = 10000,
seed = 14, mcmcfile = T)
plot(mod)
